#!/bin/bash

# Safe PAM Authentication Selector
# Only affects specific services, NOT system login (GDM)

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Choose log file based on permissions
if [[ $EUID -eq 0 ]]; then
    LOG_FILE="/var/log/pam-auth-selector.log"
else
    LOG_FILE="$HOME/.local/share/pam-auth-selector/pam-auth-selector.log"
    mkdir -p "$(dirname "$LOG_FILE")"
fi

# Services we want to modify (NOT gdm, gdm3, lightdm, etc.)
SERVICES=("sudo" "polkit-1" "gnome-screensaver" "unity")
BACKUP_DIR="/etc/pam.d/backup"

# Simple logging function
log_debug() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE" 2>/dev/null || true
}

# Function to send notification
send_notification() {
    local title="$1"
    local message="$2"
    local icon="$3"
    
    # Try to send notification as the actual user (not root)
    if [[ $EUID -eq 0 ]]; then
        # Running as root - send to user rutger
        sudo -u rutger DISPLAY=:0 notify-send -i "$icon" "$title" "$message" 2>/dev/null || true
    else
        # Running as regular user
        notify-send -i "$icon" "$title" "$message" 2>/dev/null || true
    fi
    
    # Also log the change
    log_debug "NOTIFICATION: $title - $message"
}

# Function to detect if laptop lid is open
is_lid_open() {
    log_debug "Starting lid detection..."
    
    # Check lid state files
    local lid_states=(
        "/proc/acpi/button/lid/LID/state"
        "/proc/acpi/button/lid/LID0/state" 
        "/proc/acpi/button/lid/*/state"
    )
    
    for state_file in "${lid_states[@]}"; do
        if [[ -f $state_file ]]; then
            local state_content=$(cat "$state_file" 2>/dev/null)
            log_debug "Found lid state file: $state_file with content: $state_content"
            if grep -q "open" "$state_file" 2>/dev/null; then
                log_debug "Lid detected as OPEN via $state_file"
                return 0
            fi
        elif [[ $state_file == *"*"* ]]; then
            for f in $state_file; do
                if [[ -f $f ]]; then
                    local state_content=$(cat "$f" 2>/dev/null)
                    log_debug "Found wildcard lid state file: $f with content: $state_content"
                    if grep -q "open" "$f" 2>/dev/null; then
                        log_debug "Lid detected as OPEN via $f"
                        return 0
                    fi
                fi
            done
        fi
    done
    
    # Fallback: check if built-in display is active
    if command -v xrandr >/dev/null 2>&1; then
        log_debug "Fallback: checking built-in displays with xrandr"
        local builtin_displays=$(xrandr 2>/dev/null | grep -E "(eDP|LVDS|DSI)" | grep " connected" | cut -d' ' -f1)
        log_debug "Built-in displays found: $builtin_displays"
        for display in $builtin_displays; do
            if xrandr 2>/dev/null | grep "^$display" | grep -v "disconnected" >/dev/null; then
                log_debug "Built-in display $display is active - assuming lid OPEN"
                return 0
            fi
        done
    fi
    
    log_debug "No open lid indicators found - assuming lid CLOSED"
    return 1
}

# Function to create fingerprint config for a service
create_fingerprint_config() {
    local service="$1"
    local config_file="/etc/pam.d/$service"
    
    if [[ ! -f "$config_file" ]]; then
        log_debug "Service $service config file not found, skipping"
        return
    fi
    
    # Backup original
    cp "$config_file" "$BACKUP_DIR/$service.$(date +%Y%m%d_%H%M%S)" 2>/dev/null || true
    
    # Create new config with fingerprint
    cat > "$config_file" << EOF
#%PAM-1.0
# $service - Safe PAM config with fingerprint + password
# Auto-generated by pam-auth-selector

auth    [success=1 default=ignore]      pam_fprintd.so timeout=5
auth    sufficient                      pam_unix.so nullok
auth    requisite                       pam_deny.so
auth    required                        pam_permit.so

@include common-account
@include common-session-noninteractive
EOF
    
    log_debug "Updated $service with fingerprint config"
}

# Function to create Yubikey config for a service
create_yubikey_config() {
    local service="$1"
    local config_file="/etc/pam.d/$service"
    
    if [[ ! -f "$config_file" ]]; then
        log_debug "Service $service config file not found, skipping"
        return
    fi
    
    # Backup original
    cp "$config_file" "$BACKUP_DIR/$service.$(date +%Y%m%d_%H%M%S)" 2>/dev/null || true
    
    # Create new config with Yubikey
    cat > "$config_file" << EOF
#%PAM-1.0
# $service - Safe PAM config with Yubikey + password
# Auto-generated by pam-auth-selector

auth    sufficient                      pam_u2f.so cue
auth    sufficient                      pam_unix.so nullok
auth    requisite                       pam_deny.so
auth    required                        pam_permit.so

@include common-account
@include common-session-noninteractive
EOF
    
    log_debug "Updated $service with Yubikey config"
}

# Function to restore original configs
restore_original_configs() {
    for service in "${SERVICES[@]}"; do
        config_file="/etc/pam.d/$service"
        backup_file="$BACKUP_DIR/$service.original"
        
        if [[ -f "$backup_file" ]]; then
            cp "$backup_file" "$config_file"
            log_debug "Restored original $service config"
        fi
    done
}

# Ensure we're running as root for PAM changes
if [[ $EUID -ne 0 ]]; then
    echo "Warning: Not running as root. Use 'sudo $0 $@' to modify PAM configs."
    echo "Running in test mode..."
    log_debug "=== PAM Auth Selector started in TEST MODE with args: $* ==="
    
    # Just show what would happen
    if is_lid_open; then
        echo "Would configure FINGERPRINT mode for services: ${SERVICES[*]}"
        send_notification "PAM Auth Selector (Test)" "Would switch to Fingerprint mode" "fingerprint"
    else
        echo "Would configure YUBIKEY mode for services: ${SERVICES[*]}"
        send_notification "PAM Auth Selector (Test)" "Would switch to Yubikey mode" "security-high"
    fi
    exit 0
fi

log_debug "=== PAM Auth Selector started with args: $* ==="
send_notification "PAM Auth Selector" "Starting safe authentication mode detection..." "dialog-information"

# Ensure backup directory exists
mkdir -p "$BACKUP_DIR"

# Store original configs if not already stored
for service in "${SERVICES[@]}"; do
    config_file="/etc/pam.d/$service"
    backup_file="$BACKUP_DIR/$service.original"
    
    if [[ -f "$config_file" && ! -f "$backup_file" ]]; then
        cp "$config_file" "$backup_file"
        log_debug "Stored original $service config"
    fi
done

# Main logic
case "${1:-auto}" in
    "open"|"fingerprint")
        echo "Forcing FINGERPRINT configuration for specific services"
        log_debug "Manual override: FINGERPRINT mode"
        for service in "${SERVICES[@]}"; do
            create_fingerprint_config "$service"
        done
        send_notification "PAM Auth Selector" "Switched to Fingerprint mode (services: ${SERVICES[*]})" "fingerprint"
        ;;
    "closed"|"yubikey")
        echo "Forcing YUBIKEY configuration for specific services"
        log_debug "Manual override: YUBIKEY mode" 
        for service in "${SERVICES[@]}"; do
            create_yubikey_config "$service"
        done
        send_notification "PAM Auth Selector" "Switched to Yubikey mode (services: ${SERVICES[*]})" "security-high"
        ;;
    "restore")
        echo "Restoring original PAM configurations"
        log_debug "Restoring original configs"
        restore_original_configs
        send_notification "PAM Auth Selector" "Restored original PAM configurations" "dialog-information"
        ;;
    "auto"|*)
        if is_lid_open; then
            echo "Laptop lid detected as OPEN - using fingerprint for specific services"
            log_debug "Configuration: FINGERPRINT mode"
            for service in "${SERVICES[@]}"; do
                create_fingerprint_config "$service"
            done
            send_notification "PAM Auth Selector" "Switched to Fingerprint mode (services: ${SERVICES[*]})" "fingerprint"
        else
            echo "Laptop lid detected as CLOSED - using Yubikey for specific services"
            log_debug "Configuration: YUBIKEY mode"
            for service in "${SERVICES[@]}"; do
                create_yubikey_config "$service"
            done
            send_notification "PAM Auth Selector" "Switched to Yubikey mode (services: ${SERVICES[*]})" "security-high"
        fi
        ;;
esac

echo "Safe PAM configuration completed"
log_debug "Safe PAM configuration completed for services: ${SERVICES[*]}"
